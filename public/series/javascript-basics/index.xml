<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javaScript basics on UI Hexed</title><link>https://goonie.netlify.app/series/javascript-basics/</link><description>Recent content in javaScript basics on UI Hexed</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 16 Jan 2023 10:22:33 +0200</lastBuildDate><atom:link href="https://goonie.netlify.app/series/javascript-basics/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Variable Scope in Javascript</title><link>https://goonie.netlify.app/posts/2023/01/understanding-variable-scope-in-javascript/</link><pubDate>Mon, 16 Jan 2023 10:22:33 +0200</pubDate><guid>https://goonie.netlify.app/posts/2023/01/understanding-variable-scope-in-javascript/</guid><description>JavaScript, like many programming languages, has a specific way of handling the scope of variables. In this article, we will take a closer look at variable scope in JavaScript and how it works.
What is Variable Scope? In programming, a variable&amp;rsquo;s scope refers to the portion of the code where the variable can be accessed. There are two types of variable scope in JavaScript: global and local.
Global Scope A variable declared outside of any function or block has global scope.</description></item></channel></rss>